"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–π
"""
import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from app.services.company_service import CompanyService
from app.states.company_states import CompanyCreationStates
from app.keyboards.main_menu import get_companies_menu_keyboard, get_back_to_main_keyboard
from app.keyboards.common_keyboards import get_confirmation_keyboard, get_cancel_keyboard

logger = logging.getLogger(__name__)
router = Router()


@router.callback_query(F.data == "company:create")
async def start_company_creation(callback: CallbackQuery, state: FSMContext, current_user=None, can_create_companies=None):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏
    """
    try:
        if not can_create_companies:
            await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–π", show_alert=True)
            return
        
        await state.set_state(CompanyCreationStates.waiting_for_name)
        
        await callback.message.edit_text(
            "üè¢ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏\n\n"
            "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:\n\n"
            "‚ÑπÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤",
            reply_markup=get_cancel_keyboard()
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.message(CompanyCreationStates.waiting_for_name)
async def process_company_name(message: Message, state: FSMContext, current_user=None):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏
    """
    try:
        company_name = message.text.strip()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
        company_service = CompanyService()
        if not company_service.validate_company_name(company_name):
            await message.answer(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏.\n\n"
                "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n"
                "‚Ä¢ –û—Ç 2 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤\n"
                "‚Ä¢ –ë–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ < > \" ' &\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=get_cancel_keyboard()
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è
        existing_companies = await company_service.search_companies(company_name)
        for company in existing_companies:
            if company.name.lower() == company_name.lower():
                await message.answer(
                    f"‚ùå –ö–æ–º–ø–∞–Ω–∏—è —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{company_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
                    reply_markup=get_cancel_keyboard()
                )
                return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–ø–∏—Å–∞–Ω–∏—é
        await state.update_data(company_name=company_name)
        await state.set_state(CompanyCreationStates.waiting_for_description)
        
        await message.answer(
            f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: {company_name}\n\n"
            "üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:\n\n"
            "‚ÑπÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –ø–æ–º–æ–∂–µ—Ç –ª—É—á—à–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø–∞–Ω–∏—é.\n"
            "–ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
            "–î–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ: -",
            reply_markup=get_cancel_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_cancel_keyboard()
        )


@router.message(CompanyCreationStates.waiting_for_description)
async def process_company_description(message: Message, state: FSMContext, current_user=None):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏
    """
    try:
        description = message.text.strip()
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª "-", –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        if description == "-":
            description = None
        else:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
            company_service = CompanyService()
            if not company_service.validate_company_description(description):
                await message.answer(
                    "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤).\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞:",
                    reply_markup=get_cancel_keyboard()
                )
                return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        company_name = data['company_name']
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await state.update_data(company_description=description)
        await state.set_state(CompanyCreationStates.confirming_creation)
        
        confirmation_text = f"üè¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏\n\n"
        confirmation_text += f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {company_name}\n"
        
        if description:
            confirmation_text += f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n"
        else:
            confirmation_text += f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: –Ω–µ —É–∫–∞–∑–∞–Ω–æ\n\n"
        
        confirmation_text += "–°–æ–∑–¥–∞—Ç—å –∫–æ–º–ø–∞–Ω–∏—é?"
        
        await message.answer(
            confirmation_text,
            reply_markup=get_confirmation_keyboard("confirm_company_creation", "–°–æ–∑–¥–∞—Ç—å –∫–æ–º–ø–∞–Ω–∏—é")
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_cancel_keyboard()
        )


@router.callback_query(F.data == "confirm_company_creation")
async def confirm_company_creation(callback: CallbackQuery, state: FSMContext, current_user=None):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        company_name = data['company_name']
        company_description = data.get('company_description')
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–Ω–∏—é
        company_service = CompanyService()
        company = await company_service.create_company(
            name=company_name,
            description=company_description,
            created_by=current_user.user_id
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        success_text = f"‚úÖ –ö–æ–º–ø–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
        success_text += f"üè¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {company.name}\n"
        success_text += f"üÜî ID: {company.company_id}\n"
        
        if company.description:
            success_text += f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {company.description}\n"
        
        success_text += f"\nüë§ –°–æ–∑–¥–∞—Ç–µ–ª—å: {current_user.display_name}"
        
        await callback.message.edit_text(
            success_text,
            reply_markup=get_companies_menu_keyboard()
        )
        
        await callback.answer("‚úÖ –ö–æ–º–ø–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞!")
        
    except ValueError as e:
        await callback.answer(f"‚ùå {str(e)}", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏", show_alert=True)


@router.callback_query(F.data == "cancel")
async def cancel_company_creation(callback: CallbackQuery, state: FSMContext):
    """
    –û—Ç–º–µ–Ω—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
    """
    try:
        await state.clear()
        
        await callback.message.edit_text(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_companies_menu_keyboard()
        )
        
        await callback.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
