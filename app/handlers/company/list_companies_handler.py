"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π
"""
import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery

from app.services.company_service import CompanyService
from app.keyboards.common_keyboards import get_pagination_keyboard
from app.keyboards.main_menu import get_companies_menu_keyboard, get_back_to_main_keyboard

logger = logging.getLogger(__name__)
router = Router()


@router.callback_query(F.data == "company:list")
async def show_companies_list(callback: CallbackQuery, current_user=None, can_create_companies=None):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–ø–∞–Ω–∏–π
    """
    try:
        if not can_create_companies:
            await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–ø–∞–Ω–∏–π", show_alert=True)
            return
        
        await show_companies_page(callback, 0)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("page:company_list:"))
async def handle_companies_pagination(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—é —Å–ø–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π
    """
    try:
        page = int(callback.data.split(":")[2])
        await show_companies_page(callback, page)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∫–æ–º–ø–∞–Ω–∏–π: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("company_details:"))
async def show_company_details(callback: CallbackQuery, current_user=None):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∫–æ–º–ø–∞–Ω–∏–∏
    """
    try:
        company_id = int(callback.data.split(":")[1])
        
        company_service = CompanyService()
        company = await company_service.get_company_by_id(company_id)
        
        if not company:
            await callback.answer("‚ùå –ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –¥–µ—Ç–∞–ª—è–º–∏ –∫–æ–º–ø–∞–Ω–∏–∏
        details_text = f"üè¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏\n\n"
        details_text += f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {company.name}\n"
        details_text += f"üÜî ID: {company.company_id}\n"
        
        if company.description:
            details_text += f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {company.description}\n"
        else:
            details_text += f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: –Ω–µ —É–∫–∞–∑–∞–Ω–æ\n"
        
        details_text += f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {company.created_at.strftime('%d.%m.%Y –≤ %H:%M')}\n"
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ
        from app.services.auth_service import AuthService
        auth_service = AuthService()
        creator = await auth_service.get_user_by_telegram_id(company.created_by)
        
        if creator:
            details_text += f"üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å: {creator.display_name}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–¥–∞—á–∞–º (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        # TODO: –î–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –ø–æ —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        
        keyboard = [
            [InlineKeyboardButton(text="üìã –ó–∞–¥–∞—á–∏ –∫–æ–º–ø–∞–Ω–∏–∏", callback_data=f"company_tasks:{company_id}")],
            [InlineKeyboardButton(text="üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"company_edit:{company_id}")],
            [InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É", callback_data="company:list")]
        ]
        
        await callback.message.edit_text(
            details_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        
        await callback.answer()
        
    except ValueError:
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–æ–º–ø–∞–Ω–∏–∏", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π –∫–æ–º–ø–∞–Ω–∏–∏: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


async def show_companies_page(callback: CallbackQuery, page: int):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–æ–º–ø–∞–Ω–∏–π
    
    Args:
        callback: Callback query
        page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    """
    company_service = CompanyService()
    companies = await company_service.get_all_companies()
    
    if not companies:
        await callback.message.edit_text(
            "üì≠ –°–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π –ø—É—Å—Ç\n\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.",
            reply_markup=get_companies_menu_keyboard()
        )
        await callback.answer()
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
    items_per_page = 8
    keyboard = get_pagination_keyboard(companies, page, items_per_page, "company_details")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    from aiogram.types import InlineKeyboardButton
    keyboard.inline_keyboard.append([
        InlineKeyboardButton(text="üîô –ú–µ–Ω—é –∫–æ–º–ø–∞–Ω–∏–π", callback_data="menu:companies")
    ])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    total_companies = len(companies)
    current_page = page + 1
    total_pages = (total_companies + items_per_page - 1) // items_per_page
    
    header_text = f"üè¢ –°–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π ({total_companies})\n"
    if total_pages > 1:
        header_text += f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page} –∏–∑ {total_pages}\n"
    header_text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:"
    
    await callback.message.edit_text(
        header_text,
        reply_markup=keyboard
    )
    
    await callback.answer()
