"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞)
"""
import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from app.services.auth_service import AuthService
from app.keyboards.common_keyboards import get_pagination_keyboard, get_confirmation_keyboard, get_cancel_keyboard
from app.keyboards.main_menu import get_main_menu_keyboard
from config import config

logger = logging.getLogger(__name__)
router = Router()


class RoleAssignmentStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–µ–π"""
    selecting_user = State()
    selecting_role = State()
    confirming_assignment = State()


@router.callback_query(F.data == "roles:list_users")
async def show_users_list(callback: CallbackQuery, current_user=None, user_role=None):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞)
    """
    try:
        if user_role != 'director':
            await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
            return
        
        auth_service = AuthService()
        users = await auth_service.get_all_users()
        
        if not users:
            await callback.message.edit_text(
                "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç\n\n"
                "–ü–æ–∫–∞ —á—Ç–æ –≤ —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
                reply_markup=get_main_menu_keyboard(user_role)
            )
            await callback.answer()
            return
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–æ–ª—è–º
        users_by_role = {}
        for user in users:
            if user.role not in users_by_role:
                users_by_role[user.role] = []
            users_by_role[user.role].append(user)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_text = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–∏—Å—Ç–µ–º—ã\n\n"
        
        for role, role_users in users_by_role.items():
            role_name = config.ROLES.get(role, role)
            users_text += f"üé≠ {role_name} ({len(role_users)}):\n"
            
            for user in role_users:
                users_text += f"‚Ä¢ {user.display_name}"
                if user.user_id == current_user.user_id:
                    users_text += " (–≤—ã)"
                users_text += "\n"
            
            users_text += "\n"
        
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        
        keyboard = [
            [InlineKeyboardButton(text="üé≠ –ù–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å", callback_data="roles:assign")],
            [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:main")]
        ]
        
        await callback.message.edit_text(
            users_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "roles:assign")
async def start_role_assignment(callback: CallbackQuery, state: FSMContext, current_user=None, user_role=None):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–∏
    """
    try:
        if user_role != 'director':
            await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
            return
        
        auth_service = AuthService()
        users = await auth_service.get_all_users()
        
        # –ò—Å–∫–ª—é—á–∞–µ–º —Å–∞–º–æ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
        other_users = [user for user in users if user.user_id != current_user.user_id]
        
        if not other_users:
            await callback.message.edit_text(
                "üë• –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–µ–π\n\n"
                "–í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
                reply_markup=get_main_menu_keyboard(user_role)
            )
            await callback.answer()
            return
        
        await state.set_state(RoleAssignmentStates.selecting_user)
        await state.update_data(users=other_users)
        
        await show_users_for_role_assignment(callback, other_users, 0)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–∏: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("assign_role_user:"))
async def select_user_for_role_assignment(callback: CallbackQuery, state: FSMContext):
    """
    –í—ã–±–∏—Ä–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–∏
    """
    try:
        user_id = int(callback.data.split(":")[1])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        auth_service = AuthService()
        selected_user = await auth_service.get_user_by_telegram_id(user_id)
        
        if not selected_user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        await state.update_data(selected_user=selected_user)
        await state.set_state(RoleAssignmentStates.selecting_role)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ä–æ–ª–∏
        current_role_name = config.ROLES.get(selected_user.role, selected_user.role)
        
        text = f"üë§ –í—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {selected_user.display_name}\n"
        text += f"üé≠ –¢–µ–∫—É—â–∞—è —Ä–æ–ª—å: {current_role_name}\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å:"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_role_selection_keyboard_for_assignment(selected_user.role)
        )
        
        await callback.answer()
        
    except ValueError:
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–∏: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("assign_new_role:"))
async def select_new_role(callback: CallbackQuery, state: FSMContext):
    """
    –í—ã–±–∏—Ä–∞–µ—Ç –Ω–æ–≤—É—é —Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        new_role = callback.data.split(":")[1]
        
        if new_role not in config.ROLES:
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å", show_alert=True)
            return
        
        data = await state.get_data()
        selected_user = data['selected_user']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∏ –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ç—É –∂–µ —Ä–æ–ª—å
        if selected_user.role == new_role:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç —ç—Ç—É —Ä–æ–ª—å", show_alert=True)
            return
        
        await state.update_data(new_role=new_role)
        await state.set_state(RoleAssignmentStates.confirming_assignment)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        old_role_name = config.ROLES.get(selected_user.role, selected_user.role)
        new_role_name = config.ROLES.get(new_role, new_role)
        
        confirmation_text = f"üé≠ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–∏\n\n"
        confirmation_text += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {selected_user.display_name}\n"
        confirmation_text += f"üìù –¢–µ–∫—É—â–∞—è —Ä–æ–ª—å: {old_role_name}\n"
        confirmation_text += f"üÜï –ù–æ–≤–∞—è —Ä–æ–ª—å: {new_role_name}\n\n"
        confirmation_text += "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–∏?"
        
        await callback.message.edit_text(
            confirmation_text,
            reply_markup=get_confirmation_keyboard("confirm_role_assignment", "‚úÖ –ù–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å")
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–π —Ä–æ–ª–∏: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "confirm_role_assignment")
async def confirm_role_assignment(callback: CallbackQuery, state: FSMContext, current_user=None):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–∏
    """
    try:
        data = await state.get_data()
        selected_user = data['selected_user']
        new_role = data['new_role']
        
        # –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª—å
        auth_service = AuthService()
        success = await auth_service.assign_role(
            user_id=selected_user.user_id,
            new_role=new_role,
            assigner_id=current_user.user_id
        )
        
        await state.clear()
        
        if success:
            old_role_name = config.ROLES.get(selected_user.role, selected_user.role)
            new_role_name = config.ROLES.get(new_role, new_role)
            
            success_text = f"‚úÖ –†–æ–ª—å —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞!\n\n"
            success_text += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {selected_user.display_name}\n"
            success_text += f"üé≠ –ù–æ–≤–∞—è —Ä–æ–ª—å: {new_role_name}\n"
            success_text += f"üìù –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Ä–æ–ª—å: {old_role_name}\n\n"
            success_text += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–æ–ª–∏."
            
            await callback.message.edit_text(
                success_text,
                reply_markup=get_main_menu_keyboard(current_user.role)
            )
            
            await callback.answer("‚úÖ –†–æ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∞!")
            
            # TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–æ–ª–∏
            
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–∏", show_alert=True)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–∏: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


async def show_users_for_role_assignment(callback: CallbackQuery, users: list, page: int = 0):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–∏"""
    items_per_page = 5
    keyboard = get_pagination_keyboard(users, page, items_per_page, "assign_role_user")
    
    # –ó–∞–º–µ–Ω—è–µ–º callback –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for row in keyboard.inline_keyboard[:-1]:  # –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
        for button in row:
            if button.callback_data.startswith("assign_role_user:"):
                user_id = int(button.callback_data.split(":")[1])
                user = next((u for u in users if u.user_id == user_id), None)
                if user:
                    role_name = config.ROLES.get(user.role, user.role)
                    button.text = f"{user.display_name} ({role_name})"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    from aiogram.types import InlineKeyboardButton
    keyboard.inline_keyboard.append([
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")
    ])
    
    total_users = len(users)
    current_page = page + 1
    total_pages = (total_users + items_per_page - 1) // items_per_page
    
    header_text = f"üë• –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–∏\n"
    if total_pages > 1:
        header_text += f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page} –∏–∑ {total_pages}\n"
    header_text += f"\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}"
    
    await callback.message.edit_text(header_text, reply_markup=keyboard)
    await callback.answer()


def get_role_selection_keyboard_for_assignment(current_role: str):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–π —Ä–æ–ª–∏"""
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    keyboard = []
    
    for role_key, role_name in config.ROLES.items():
        if role_key != current_role:  # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ä–æ–ª—å
            keyboard.append([
                InlineKeyboardButton(
                    text=f"üé≠ {role_name}",
                    callback_data=f"assign_new_role:{role_key}"
                )
            ])
    
    keyboard.append([
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


@router.callback_query(F.data == "cancel")
async def cancel_role_assignment(callback: CallbackQuery, state: FSMContext, user_role=None):
    """–û—Ç–º–µ–Ω—è–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–∏"""
    try:
        await state.clear()
        
        await callback.message.edit_text(
            "‚ùå –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_main_menu_keyboard(user_role)
        )
        
        await callback.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–∏: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
