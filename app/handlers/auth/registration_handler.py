"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""
import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command

from app.services.auth_service import AuthService
from app.keyboards.main_menu import get_main_menu_keyboard
from config import config

logger = logging.getLogger(__name__)
router = Router()


@router.message(Command("register"))
async def register_command(message: Message, current_user=None, telegram_user=None):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /register
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_user: –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–∏–∑ middleware)
        telegram_user: –î–∞–Ω–Ω—ã–µ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–∑ middleware)
    """
    try:
        if current_user:
            await message.answer(
                f"‚ÑπÔ∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n"
                f"üë§ –ò–º—è: {current_user.first_name}\n"
                f"üé≠ –†–æ–ª—å: {config.ROLES.get(current_user.role, current_user.role)}\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                reply_markup=get_main_menu_keyboard(current_user.role)
            )
            return
        
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        if not telegram_user:
            telegram_user = {
                'user_id': message.from_user.id,
                'username': message.from_user.username,
                'first_name': message.from_user.first_name,
                'last_name': message.from_user.last_name
            }
        
        await message.answer(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {telegram_user['first_name']}!\n\n"
            f"üè¢ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏.\n\n"
            f"–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å –≤ –∫–æ–º–ø–∞–Ω–∏–∏:",
            reply_markup=get_role_selection_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ register_command: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )


def get_role_selection_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ä–æ–ª–∏ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
    role_descriptions = {
        'director': 'üëë –î–∏—Ä–µ–∫—Ç–æ—Ä - –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ',
        'manager': 'üëî –ú–µ–Ω–µ–¥–∂–µ—Ä - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏—è–º–∏ –∏ –∑–∞–¥–∞—á–∞–º–∏',
        'chief_admin': '‚öôÔ∏è –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω - –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á',
        'sysadmin': 'üõ† –°–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω - –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á'
    }
    
    for role_key, description in role_descriptions.items():
        keyboard.append([
            InlineKeyboardButton(
                text=description,
                callback_data=f"register_role:{role_key}"
            )
        ])
    
    keyboard.append([
        InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", 
            callback_data="cancel_registration"
        )
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


@router.callback_query(F.data.startswith("register_role:"))
async def handle_registration_role_selection(callback: CallbackQuery, telegram_user=None):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    
    Args:
        callback: Callback query
        telegram_user: –î–∞–Ω–Ω—ã–µ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        role = callback.data.split(":")[1]
        
        if role not in config.ROLES:
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å", show_alert=True)
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not telegram_user:
            telegram_user = {
                'user_id': callback.from_user.id,
                'username': callback.from_user.username,
                'first_name': callback.from_user.first_name,
                'last_name': callback.from_user.last_name
            }
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        auth_service = AuthService()
        user = await auth_service.register_user(telegram_user, role)
        
        success_text = f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n\n"
        success_text += f"üë§ –ò–º—è: {user.first_name}"
        if user.last_name:
            success_text += f" {user.last_name}"
        success_text += f"\nüé≠ –†–æ–ª—å: {config.ROLES[user.role]}\n"
        if user.username:
            success_text += f"üì± Username: @{user.username}\n"
        
        success_text += f"\nüéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É!\n"
        success_text += f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏."
        
        await callback.message.edit_text(
            success_text,
            reply_markup=get_main_menu_keyboard(user.role)
        )
        
        await callback.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {user.user_id} ({user.role})")
        
    except ValueError as e:
        await callback.answer(f"‚ùå {str(e)}", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)


@router.callback_query(F.data == "cancel_registration")
async def cancel_registration(callback: CallbackQuery):
    """
    –û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    """
    try:
        await callback.message.edit_text(
            "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ /register –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏."
        )
        
        await callback.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.message(Command("whoami"))
async def whoami_command(message: Message, current_user=None, user_role=None):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        current_user: –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        if not current_user:
            await message.answer(
                "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
            )
            return
        
        info_text = f"üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ\n\n"
        info_text += f"üÜî ID: {current_user.user_id}\n"
        info_text += f"üìù –ò–º—è: {current_user.first_name}"
        
        if current_user.last_name:
            info_text += f" {current_user.last_name}"
        
        if current_user.username:
            info_text += f"\nüì± Username: @{current_user.username}"
        
        info_text += f"\nüé≠ –†–æ–ª—å: {config.ROLES.get(user_role, user_role)}"
        
        if current_user.phone:
            info_text += f"\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {current_user.phone}"
        
        info_text += f"\nüìÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {current_user.created_at.strftime('%d.%m.%Y –≤ %H:%M')}"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        info_text += f"\n\nüîê –í–∞—à–∏ –ø—Ä–∞–≤–∞:\n"
        
        if user_role == 'director':
            info_text += "‚Ä¢ –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ\n"
            info_text += "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏\n"
            info_text += "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∏\n"
            info_text += "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–π –∏ –∑–∞–¥–∞—á\n"
        elif user_role == 'manager':
            info_text += "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–π\n"
            info_text += "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á\n"
            info_text += "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏\n"
        elif user_role in ['chief_admin', 'sysadmin']:
            info_text += "‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á\n"
            info_text += "‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á\n"
            info_text += "‚Ä¢ –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤\n"
        
        await message.answer(
            info_text,
            reply_markup=get_main_menu_keyboard(user_role)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ whoami_command: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")
